{"name":"java-sdk","tagline":"Java SDKto use the IBM Watson services. It supports Android.","body":"# Watson Developer Cloud Java SDK\r\n\r\nJava client library to use the [Watson Developer Cloud][wdc] services, a collection of REST\r\nAPIs and SDKs that use cognitive computing to solve complex problems.\r\n\r\n\r\n## Table of Contents\r\n  * [Installation](#installation)\r\n    * [Maven](#maven)\r\n    * [Gradle](#gradle)\r\n  * [Usage](#usage)\r\n  * [Getting the Service Credentials](#getting-the-service-credentials)\r\n  * [Questions](#questions)\r\n  * [Examples](#examples)\r\n  * [IBM Watson Services](#ibm-watson-services)\r\n    * [Alchemy Language](#alchemy-language)\r\n    * [Alchemy Vision](#alchemy-vision)\r\n    * [Alchemy Data News](#alchemy-data-news)\r\n    * [Concept Expansion](#concept-expansion)\r\n    * [Concept Insights](#concept-insights)\r\n    * [Dialog](#dialog)\r\n    * [Document Conversion](#document-conversion)\r\n    * [Language Identification](#language-identification)\r\n    * [Language Translation](#language-translation)\r\n    * [Machine Translation](#machine-translation)\r\n    * [Natural Language Classifier](#natural-language-classifier)\r\n    * [Personality Insights](#personality-insights)\r\n    * [Relationship Extraction](#relationship-extraction)\r\n    * [Retrieve and Rank](#retrieve-and-rank)\r\n    * [Speech to Text](#speech-to-text)\r\n    * [Text to Speech](#text-to-speech)\r\n    * [Tone Analyzer](#tone-analyzer)\r\n    * [Tradeoff Analytics](#tradeoff-analytics)\r\n    * [Visual Insights](#visual-insights)\r\n    * [Visual Recognition](#visual-recognition)\r\n  * [Android](#android)\r\n  * [Running in Bluemix](#running-in-bluemix)\r\n  * [Build + Test](#build--test)\r\n  * [Eclipse and Intellij](#working-with-eclipse-and-intellij-idea)\r\n  * [Open Source @ IBM](#open-source--ibm)\r\n  * [License](#license)\r\n  * [Contributing](#contributing)\r\n\r\n## Installation\r\n\r\n[![Download Jar](https://raw.githubusercontent.com/watson-developer-cloud/java-sdk/master/src/test/resources/download.png)][jar]\r\n\r\n##### Maven\r\n```xml\r\n<dependency>\r\n\t<groupId>com.ibm.watson.developer_cloud</groupId>\r\n\t<artifactId>java-sdk</artifactId>\r\n\t<version>2.5.0</version>\r\n</dependency>\r\n```\r\n##### Gradle\r\n\r\n```gradle\r\n'com.ibm.watson.developer_cloud:java-sdk:2.5.0'\r\n```\r\n\r\nNow, you are ready to see some [examples](https://github.com/watson-developer-cloud/java-sdk/tree/master/examples/java/com/ibm/watson/developer_cloud).\r\n\r\n## Usage\r\n\r\nThe examples below assume that you already have service credentials. If not,\r\nyou will have to create a service in [Bluemix][bluemix].\r\n\r\nIf you are running your application in Bluemix, you don't need to specify the\r\ncredentials; the library will get them for you by looking at the `VCAP_SERVICES` environment variable.\r\n\r\n## Getting the Service Credentials\r\nYou will need the `username` and `password` (`api_key` for AlchemyAPI) credentials for each service. Service credentials are different from your Bluemix account username and password.\r\n\r\nTo get your service credentials, follow these steps:\r\n 1. Log in to Bluemix at https://bluemix.net.\r\n\r\n 1. Create an instance of the service:\r\n     1. In the Bluemix **Catalog**, select the service you want to use.\r\n     1. Under **Add Service**, type a unique name for the service instance in the Service name field. For example, type `my-service-name`. Leave the default values for the other options.\r\n     1. Click **Create**.\r\n\r\n 1. Copy your credentials:\r\n     1. On the left side of the page, click **Service Credentials** to view your service credentials.\r\n     1. Copy `username` and `password`(`api_key` for AlchemyAPI).\r\n\r\nOnce you have credentials, copy config.properties.example to src/test/resources/config.properties, and fill them in as necessary.\r\n\r\n## Questions\r\n\r\nIf you are having difficulties using the APIs or have a question about the IBM\r\nWatson Services, please ask a question on\r\n[dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson)\r\nor [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson).\r\n\r\n\r\n## IBM Watson Services\r\nThe Watson Developer Cloud offers a variety of services for building cognitive\r\napplications.\r\n\r\n### Alchemy Language\r\n[Alchemy Language][alchemy_language] offers 12 API functions as part of its text analysis service, each of which uses sophisticated natural language processing techniques to analyze your content and add high-level semantic information.\r\n\r\nUse the [Sentiment Analysis][sentiment_analysis] endpoint to identify positive/negative sentiment within a sample text document.\r\n\r\n```java\r\nAlchemyLanguage service = new AlchemyLanguage();\r\nservice.setApiKey(\"<api_key>\");\r\n\r\nMap<String,Object> params = new HashMap<String, Object>();\r\nparams.put(AlchemyLanguage.TEXT, \"IBM Watson won the Jeopardy television show hosted by Alex Trebek\");\r\nDocumentSentiment sentiment =  service.getSentiment(params);\r\n\r\nSystem.out.println(sentiment);\r\n```\r\n\r\n### Alchemy Vision\r\n[Alchemy Vision][alchemy_vision] uses deep learning innovations to understand a picture's content and context. It sees complex visual scenes in their entirety —without needing any textual clues— leveraging a holistic approach to understand the objects, faces, and words in an image.\r\n\r\nExample: Extract keywords from an image.\r\n\r\n```java\r\nAlchemyVision service = new AlchemyVision();\r\nservice.setApiKey(\"<api_key>\");\r\n\r\nFile image = new File(\"src/test/resources/alchemy/obama.jpg\");\r\nBoolean forceShowAll = false;\r\nBoolean knowledgeGraph = false;\r\nImageKeywords keywords =  service.getImageKeywords(, forceShowAll, knowledgeGraph);\r\n\r\nSystem.out.println(keywords);\r\n```\r\n\r\n### Alchemy Data News\r\n[Alchemy Data News][alchemy_data_news] indexes 250k to 300k English language news and\r\nblog articles every day with historical search available for the past 60 days.\r\nExample: Get 7 documents between Friday 28th August 2015 and Friday 4th September 2015.\r\n\r\n```java\r\nAlchemyDataNews service = new AlchemyDataNews();\r\nservice.setApiKey(\"<api_key>\");\r\n\r\nMap<String, Object> params = new HashMap<String, Object>();\r\n\r\nString[] fields =\r\n    new String[] {\"enriched.url.title\", \"enriched.url.url\", \"enriched.url.author\",\r\n        \"enriched.url.publicationDate\", \"enriched.url.enrichedTitle.entities\",\r\n        \"enriched.url.enrichedTitle.docSentiment\"};\r\nparams.put(AlchemyDataNews.RETURN, StringUtils.join(fields, \",\"));\r\nparams.put(AlchemyDataNews.START, \"1440720000\");\r\nparams.put(AlchemyDataNews.END, \"1441407600\");\r\nparams.put(AlchemyDataNews.COUNT, 7);\r\n\r\nDocumentsResult result = service.getNewsDocuments(params);\r\n\r\nSystem.out.println(result);\r\n```\r\n\r\n### Concept Expansion\r\nMap euphemisms or colloquial terms to more commonly understood phrases using\r\nthe [Concept Expansion][concept_expansion] service.\r\nExample: Create a job, wait for it to finish, and then retrieve results.\r\n\r\n```java\r\nConceptExpansion service = new ConceptExpansion();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nString[] seeds = new String[] {\"nyc\", \"dc\", \"london\", \"big cities\"};\r\nString label = \"demo\";\r\n\r\nJob job = service.createJob(label, seeds);\r\n\r\nwhile (service.getJobStatus(job) == Job.Status.AWAITING_WORK\r\n    || service.getJobStatus(job) == Job.Status.IN_FLIGHT) {\r\n  try {\r\n    Thread.sleep(4000);\r\n  } catch (final InterruptedException e) {\r\n    e.printStackTrace();\r\n  }\r\n}\r\n\r\nSystem.out.println(service.getJobResult(job));\r\n```\r\n\r\n\r\n### Concept Insights\r\nUse the [Concept Insights][concept_insights] service to identify words in the text that\r\ncorrespond to concepts in a Wikipedia graph.\r\n\r\n```java\r\nConceptInsights service = new ConceptInsights();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nAnnotations annotations = service.annotateText(Graph.WIKIPEDIA,\r\n    \"IBM Watson won the Jeopardy television show hosted by Alex Trebek\");\r\n\r\nSystem.out.println(annotations);\r\n```\r\n\r\n### Dialog\r\nReturns the dialog list using the [Dialog][dialog] service.\r\n\r\n```java\r\nDialogService service = new DialogService();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nList<Dialog> dialogs = service.getDialogs();\r\nSystem.out.println(dialogs);\r\n```\r\n\r\n### Document Conversion\r\nThe [Document Conversion][document_conversion] service allows to convert pdf, word, and html documents into formats useful to other Watson Cognitive services. Target formats include normalized html, plain text, and sets of potential answers for Watson question answering. You can convert documents synchronously one at a time, or asynchronously in batches\r\n\r\nReturns the document list using the [Document Conversion][document_conversion] service.\r\n\r\n```java\r\nDocumentConversion service = new DocumentConversion(\"2015-12-01\");\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nFile doc = new File(\"src/test/resources/document_conversion/word-document-heading-input.doc\");\r\nAnswers htmlToAnswers = service.convertDocumentToAnswer(doc);\r\nSystem.out.println(htmlToAnswers);\r\n```\r\n\r\n### Language Translation\r\nSelect a domain, then identify or select the language of text, and then translate the text from one supported language to another.  \r\nExample: Translate 'hello' from English to Spanish using the [Language Translation][language_translation] service.\r\n\r\n```java\r\nLanguageTranslation service = new LanguageTranslation();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nTranslationResult translationResult = service.translate(\"hello\", \"en\", \"es\");\r\nSystem.out.println(translationResult);\r\n```\r\n\r\n### Natural Language Classifier\r\nUse [Natural Language Classifier](http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/nl-classifier/) service to create a classifier instance by providing a set of representative strings and a set of one or more correct classes for each as training. Then use the trained classifier to classify your new question for best matching answers or to retrieve next actions for your application.\r\n\r\n```java\r\nNaturalLanguageClassifier service = new NaturalLanguageClassifier();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nClassification classification = service.classify(\"<classifier-id>\", \"Is it sunny?\");\r\nSystem.out.println(classification);\r\n```\r\n\r\n**Note:** You will need to create and train a classifier in order to be able to classify phrases.\r\n\r\n\r\n### Personality Insights\r\nUse linguistic analytics to infer personality and social characteristics, including Big Five, Needs, and Values, from text.  \r\nExample: Analyze text and get a personality profile using the [Personality Insights][personality_insights] service.\r\n\r\n```java\r\nPersonalityInsights service = new PersonalityInsights();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\n// Demo content from Moby Dick by Hermann Melville (Chapter 1)\r\nString text = \"Call me Ishmael. Some years ago-never mind how long precisely-having \"\r\n    + \"little or no money in my purse, and nothing particular to interest me on shore, \"\r\n    + \"I thought I would sail about a little and see the watery part of the world. \"\r\n    + \"It is a way I have of driving off the spleen and regulating the circulation. \"\r\n    + \"Whenever I find myself growing grim about the mouth; whenever it is a damp, \"\r\n    + \"drizzly November in my soul; whenever I find myself involuntarily pausing before \"\r\n    + \"coffin warehouses, and bringing up the rear of every funeral I meet; and especially \"\r\n    + \"whenever my hypos get such an upper hand of me, that it requires a strong moral \"\r\n    + \"principle to prevent me from deliberately stepping into the street, and methodically \"\r\n    + \"knocking people's hats off-then, I account it high time to get to sea as soon as I can. \"\r\n    + \"This is my substitute for pistol and ball. With a philosophical flourish Cato throws himself \"\r\n    + \"upon his sword; I quietly take to the ship. There is nothing surprising in this. \"\r\n    + \"If they but knew it, almost all men in their degree, some time or other, cherish \"\r\n    + \"very nearly the same feelings towards the ocean with me. There now is your insular \"\r\n    + \"city of the Manhattoes, belted round by wharves as Indian isles by coral reefs-commerce surrounds \"\r\n    + \"it with her surf. Right and left, the streets take you waterward.\";\r\n\r\nProfile profile = service.getProfile(text);\r\nSystem.out.println(profile);\r\n```\r\n\r\n**Note:** Don't forget to update the `text` variable! Also, if you experience\r\nauthentication errors, remember that the Personality Insights service is not\r\na free service.\r\n\r\n\r\n### Relationship Extraction\r\nAnalyze an English news article and get the relationships between sentence\r\ncomponents (nouns, verbs, subjects, objects, etc.) by using the\r\n[Relationship Extraction][relationship_extraction] service.\r\n\r\n```java\r\nRelationshipExtraction service = new RelationshipExtraction();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nservice.setDataset(Dataset.ENGLISH_NEWS);\r\nString response = service.extract(\"IBM Watson Developer Cloud\");\r\nSystem.out.println(response);\r\n```\r\n\r\n\r\n### Retrieve and Rank\r\nThe [Retrieve and Rank][retrieve_and_rank] service helps users find the most\r\nrelevant information for their query by using a  combination of search and\r\nmachine learning to find “signals” in the data.\r\n\r\n\r\n```java\r\nRetrieveAndRank service = new RetrieveAndRank();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\n// 1 create the Solr Cluster\r\nSolrClusterOptions options = new SolrClusterOptions(\"my-cluster-name\", 1);\r\nSolrCluster cluster = service.createSolrCluster(options);\r\nSystem.out.println(\"Solr cluster: \" + cluster);\r\n\r\n// 2 wait until the Solr Cluster is available\r\nwhile (cluster.getStatus() == Status.NOT_AVAILABLE) {\r\n  Thread.sleep(10000); // sleep 10 seconds\r\n  cluster = service.getSolrCluster(cluster.getId());\r\n  System.out.println(\"Solr cluster status: \" + cluster.getStatus());\r\n}\r\n\r\n// 3 list Solr Clusters\r\nSystem.out.println(\"Solr clusters: \" + service.getSolrClusters());\r\n```\r\n\r\nRetrieve and Rank is built on top of Apache Solr.\r\nLook at [this](https://github.com/watson-developer-cloud/java-sdk/tree/master/examples/retrieve-and-rank-solrj) example to learn how to use Solrj.\r\n\r\n### Speech to Text\r\nUse the [Speech to Text][speech_to_text] service to recognize the text from a .wav file.\r\n\r\n```java\r\nSpeechToText service = new SpeechToText();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nFile audio = new File(\"src/test/resources/sample1.wav\");\r\n\r\nSpeechResults transcript = service.recognize(audio, HttpMediaType.AUDIO_WAV);\r\nSystem.out.println(transcript);\r\n```\r\n\r\n#### WebSocket support\r\n\r\nSpeech to Text supports WebSocket, the url is:  \r\n  `wss://stream.watsonplatform.net/speech-to-text/api/v1/recognize`  \r\n\r\nWe recommend you use [this](http://java-websocket.org/) java client.\r\n\r\n### Text to Speech\r\nUse the [Text to Speech][text_to_speech] service to get the available voices to synthesize.\r\n\r\n```java\r\nTextToSpeech service = new TextToSpeech();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nList<Voice> voices = service.getVoices();\r\nSystem.out.println(voices);\r\n```\r\n\r\n### Tone Analyzer\r\nUse the [Tone Analyzer][tone_analyzer] service to get the tone of your email.\r\n\r\n```java\r\nToneAnalyzer service = new ToneAnalyzer();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nString text = \"I know the times are difficult! Our sales have been \"\r\n\t+ \"disappointing for the past three quarters for our data analytics \"\r\n\t+ \"product suite. We have a competitive data analytics product \"\r\n\t+ \"suite in the industry. But we need to do our job selling it! \"\r\n\t+ \"We need to acknowledge and fix our sales challenges.\";\r\n\r\n// Call the service and get the tone\r\nTone tone = service.getTone(text, Scorecard.EMAIL);\r\nSystem.out.println(tone);\r\n```\r\n\r\n\r\n### Tradeoff Analytics\r\nUse the [Tradeoff Analytics][tradeoff_analytics] service to find the best\r\nphone that minimizes price and weight and maximizes screen size.\r\n\r\n```java\r\nTradeoffAnalytics service = new TradeoffAnalytics();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nProblem problem = new Problem(\"phone\");\r\n\r\nString price = \"price\";\r\nString ram = \"ram\";\r\nString screen = \"screen\";\r\n\r\n// Define the objectives\r\nList<Column> columns = new ArrayList<Column>();\r\nproblem.setColumns(columns);\r\n\r\ncolumns.add(new NumericColumn().withRange(0, 100).withKey(price).withGoal(Goal.MIN).withObjective(true));\r\ncolumns.add(new NumericColumn().withKey(screen).withGoal(Goal.MAX).withObjective(true));\r\ncolumns.add(new NumericColumn().withKey(ram).withGoal(Goal.MAX));\r\n\r\n// Define the options to choose\r\nList<Option> options = new ArrayList<Option>();\r\nproblem.setOptions(options);\r\n\r\nHashMap<String, Object> galaxySpecs = new HashMap<String, Object>();\r\ngalaxySpecs.put(price, 50);\r\ngalaxySpecs.put(ram, 45);\r\ngalaxySpecs.put(screen, 5);\r\noptions.add(new Option(\"1\", \"Galaxy S4\").withValues(galaxySpecs));\r\n\r\nHashMap<String, Object> iphoneSpecs = new HashMap<String, Object>();\r\niphoneSpecs.put(price, 99);\r\niphoneSpecs.put(ram, 40);\r\niphoneSpecs.put(screen, 4);\r\noptions.add(new Option(\"2\", \"iPhone 5\").withValues(iphoneSpecs));\r\n\r\nHashMap<String, Object> optimusSpecs = new HashMap<String, Object>();\r\noptimusSpecs.put(price, 10);\r\noptimusSpecs.put(ram, 300);\r\noptimusSpecs.put(screen, 5);\r\noptions.add(new Option(\"3\", \"LG Optimus G\").withValues(optimusSpecs));\r\n\r\n// Call the service and get the resolution\r\nDilemma dilemma = service.dilemmas(problem);\r\nSystem.out.println(dilemma);\r\n```\r\n\r\n### Visual Insights\r\nUse the [Visual Insights][visual_insights] to get insight into the themes present in a collection of images based on their visual appearance/content.\r\n\r\n```java\r\nVisualInsights service = new VisualInsights();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nFile images = new File(\"src/test/resources/visual_insights/images.zip\");\r\nSummary summary = service.getSummary(images);\r\n\r\nSystem.out.println(summary);\r\n```\r\n\r\n### Visual Recognition\r\nUse the [Visual Recognition][visual_recognition] service to recognize the\r\nfollowing picture.\r\n\r\n![Car](https://visual-recognition-demo.mybluemix.net/images/samples/5.jpg)\r\n\r\n```java\r\nVisualRecognition service = new VisualRecognition();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nFile image = new File(\"src/test/resources/visual_recognition/car.png\");\r\n\r\nVisualRecognitionImages recognizedImage = service.recognize(image);\r\nSystem.out.println(recognizedImage);\r\n```\r\n\r\n## Android\r\nhe library supports Android 2.3 and above. For Java, the minimum requirement is 1.7.  \r\nIt depends on [OkHttp][] and [gson][].\r\n\r\n\r\n## Running in Bluemix\r\nWhen running in Bluemix, the library will automatically get the credentials from `VCAP_SERVICES`.\r\nIf you have more than one plan, you can use `BluemixUtils` to get the service credentials for an specific plan.\r\n\r\n```java\r\nPersonalityInsights service = new PersonalityInsights();\r\nString apiKey = BluemixUtils.getAPIKey(service.getName(), BluemixUtils.PLAN_STANDARD);\r\nservice.setApiKey(apiKey);\r\n```\r\n\r\n## Build + Test\r\n\r\nTo build and test the project you can use [Gradle][] (version 1.x): or [Apache Maven][apache_maven].\r\n\r\nGradle:\r\n\r\n  ```sh\r\n  $ cd java-sdk\r\n  $ gradle jar  # build jar file (build/libs/watson-developer-cloud-2.5.0.jar)\r\n  $ gradle test # run tests\r\n  ```\r\n\r\nor Maven:\r\n\r\n  ```sh\r\n  $ cd java-sdk\r\n  $ mvn install\r\n  ```\r\n\r\n## Working with Eclipse and Intellij IDEA\r\n\r\nIf you want to work on the code in an IDE instead of a text editor you can\r\neasily create project files with gradle:\r\n\r\n  ```sh\r\n  $ gradle idea     # Intellij IDEA\r\n  $ gradle eclipse  # Eclipse\r\n  ```\r\n\r\nor maven:\r\n\r\n  ```sh\r\n  $ mvn idea:idea # Intellij IDEA\r\n  $ mvn eclipse:eclipse # Eclipse\r\n  ```\r\n\r\n## License\r\n\r\nThis library is licensed under Apache 2.0.\r\n\r\n\r\n[personality_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/personality-insights/\r\n[language_identification]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/lidapi/\r\n[machine_translation]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mtapi/\r\n[document_conversion]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/document-conversion/\r\n[relationship_extraction]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/sireapi/\r\n[language_translation]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/language-translation/\r\n[visual_recognition]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-recognition/\r\n[tradeoff_analytics]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tradeoff-analytics/\r\n[text_to_speech]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/text-to-speech/\r\n[speech_to_text]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/speech-to-text/\r\n[tone_analyzer]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tone-analyzer/\r\n[dialog]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/dialog/\r\n[concept_insights]: https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/concept-insights/\r\n[visual_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-insights/\r\n[retrieve_and_rank]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/retrieve-rank/\r\n[concept_expansion]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/concept-expansion/\r\n\r\n[alchemy_language]: http://www.alchemyapi.com/products/alchemylanguage\r\n[sentiment_analysis]: http://www.alchemyapi.com/products/alchemylanguage/sentiment-analysis\r\n[alchemy_vision]: http://www.alchemyapi.com/products/alchemyvision\r\n[alchemy_data_news]: http://www.alchemyapi.com/products/alchemydata-news\r\n\r\n[wdc]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\r\n[bluemix]: https://console.ng.bluemix.net\r\n[Gradle]: http://www.gradle.org/\r\n[OkHttp]: http://square.github.io/okhttp/\r\n[gson]: https://github.com/google/gson\r\n[apache_maven]: http://maven.apache.org/\r\n[releases]: https://github.com/watson-developer-cloud/java-sdk/releases\r\n\r\n[jar]: https://github.com/watson-developer-cloud/java-sdk/releases/download/java-sdk-2.5.0/java-sdk-2.5.0-jar-with-dependencies.jar\r\n","google":"UA-59827755-4","note":"Don't delete this file! It's used internally to help with page regeneration."}