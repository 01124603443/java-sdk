{"name":"java-wrapper","tagline":"Java wrapper/client/sdk to use the IBM Watson services. It supports Android.","body":"# Watson Developer Cloud Java Wrapper\r\n[![Build Status](https://secure.travis-ci.org/watson-developer-cloud/java-wrapper.png)](http://travis-ci.org/watson-developer-cloud/java-wrapper)  \r\nWrapper to use the [Watson Developer Cloud][wdc] services.\r\nA collection of REST APIs and SDKs that use cognitive computing\r\nto solve complex problems.\r\n\r\n[javadocs](javadocs)\r\n## Table of Contents\r\n  * [Watson Developer Cloud][wdc]\r\n    * [Questions](#questions)\r\n    * [Installation](#installation)\r\n    * [Usage](#usage)\r\n    * [Getting the Service Credentials](#getting-the-service-credentials)\r\n    * [IBM Watson Services](#ibm-watson-services)\r\n      * [Concept Expansion](#concept-expansion)\r\n      * [Language Identification](#language-identification)\r\n      * [Machine Translation](#machine-translation)\r\n      * [Message Resonance](#message-resonance)\r\n      * [Personality Insights](#personality-insights)\r\n      * [Question and Answer](#question-and-answer)\r\n      * [Relationship Extraction](#relationship-extraction)\r\n      * [Speech to Text](#speech-to-text)\r\n      * [Text to Speech](#text-to-speech)\r\n      * [Tradeoff Analytics](#tradeoff-analytics)\r\n      * [Visual Recognition](#visual-recognition)\r\n    * [Running in Bluemix](#running-in-bluemix)\r\n    * [Debug](#debug)\r\n    * [Tests](#tests)\r\n    * [Open Source @ IBM](#open-source--ibm)\r\n    * [License](#license)\r\n    * [Contributing](#contributing)\r\n\r\n## Questions\r\n\r\nIf you are having difficulties using the APIs or have a question about the IBM\r\nWatson Services, please ask a question on\r\n[dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson)\r\nor [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson).\r\n\r\n## Installation\r\n\r\nDownload the [jar][downloads] and add it to your project.\r\n\r\n## Usage\r\n\r\nThe examples below assume that you already have service credentials. If not,\r\nyou will have to create and bind the service in [Bluemix][bluemix]. See the\r\n[Getting Started][getting_started] page for more details.\r\n\r\nIf you are running your application in Bluemix, you don't need to specify the\r\ncredentials; the wrapper will get them for you by looking at the `VCAP_SERVICES`\r\nenvironment variable.\r\n\r\n### Getting the Service Credentials\r\n\r\nThe credentials for the services are stored in the\r\n[VCAP_SERVICES][vcap_environment] environment variable. To get them, you need\r\nto first create and bind the service to your application.\r\n\r\nYou will need the `username` and `password` credentials for each service these are *not* your Bluemix credentials, and are found in the VCAP_SERVICES variable on Bluemix for each service.\r\n\r\n## IBM Watson Services\r\nThe Watson Developer Cloud offers a variety of services for building cognitive\r\napps.\r\n\r\n### Concept Expansion\r\nMap euphemisms or colloquial terms to more commonly understood phrases using\r\nthe [Concept Expansion][concept_expansion] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.concept_expansion.v1.ConceptExpansion;\r\nimport com.ibm.watson.developer_cloud.concept_expansion.v1.model.ConceptExpansionDataset;\r\nimport com.ibm.watson.developer_cloud.concept_expansion.v1.model.Job;\r\n\r\nConceptExpansion service = new ConceptExpansion();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nString[] seeds = new String[]{\"motrin\",\"tylenol\",\"aspirin\"};\r\nString label = \"medicine\";\r\nservice.setDataset(ConceptExpansionDataset.MT_SAMPLES);\r\nJob job = service.createJob(label, seeds);\r\n\r\nwhile (service.getJobStatus(job) == Job.Status.AWAITING_WORK\r\n\t\t|| service.getJobStatus(job) == Job.Status.IN_FLIGHT) {\r\n\ttry {\r\n\t\tThread.sleep(4000);\r\n\t} catch (InterruptedException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n}\r\n\r\nSystem.out.println(service.getJobResult(job));\r\n```\r\n**Node:** The example above only create the job, check the `/examples` folder for a complete example.\r\n\r\n\r\n### Language Identification\r\nExample: Identify a language using the [Language Identification][language_identification] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.language_identification.v1.LanguageIdentification;\r\nimport com.ibm.watson.developer_cloud.language_identification.v1.model.IdentifiedLanguage;\r\n\r\nLanguageIdentification service = new LanguageIdentification();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nIdentifiedLanguage lang = service.identify(\"The language identification service takes text input and identifies the language used.\");\r\nSystem.out.println(lang);\r\n```\r\n\r\n\r\n### Machine Translation\r\nExample: Translate text from one language to another using the [Machine Translation][machine_translation] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.machine_translation.v1.MachineTranslation;\r\nimport com.ibm.watson.developer_cloud.machine_translation.v1.model.Language;\r\n\r\nMachineTranslation service = new MachineTranslation();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\nString response = service.translate(\"The IBM Watson team is awesome\", Language.ENGLISH, Language.SPANISH);\r\nSystem.out.println(response);\r\n```\r\n\r\n### Message Resonance\r\nExample: Get resonance information for individual words in a sentence from the [Message Resonance][message_resonance] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.message_resonance.v1.MessageResonance;\r\nimport com.ibm.watson.developer_cloud.message_resonance.v1.model.MessageResonanceDataset;\r\nimport com.ibm.watson.developer_cloud.message_resonance.v1.model.Message;\r\n\r\nMessageResonance service = new MessageResonance();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nservice.setDataset(MessageResonanceDataset.BIG_DATA);\r\nMessage message = service.getResonance(\"IBM Watson Developer Cloud\");\r\nSystem.out.println(message);\r\n```\r\n\r\n\r\n### Personality Insights\r\nExample: Analyze text and get a personality profile using the [Personality Insights][personality_insights] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.personality_insights.v2.PersonalityInsights;\r\nimport com.ibm.watson.developer_cloud.personality_insights.v2.model.Profile;\r\n\r\nPersonalityInsights service = new PersonalityInsights();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\n// Demo content from Moby Dick by Hermann Melville (Chapter 1)\r\nString text = \"Call me Ishmael. Some years ago-never mind how long precisely-having \"\r\n    + \"little or no money in my purse, and nothing particular to interest me on shore, \"\r\n    + \"I thought I would sail about a little and see the watery part of the world. \"\r\n    + \"It is a way I have of driving off the spleen and regulating the circulation. \"\r\n    + \"Whenever I find myself growing grim about the mouth; whenever it is a damp, \"\r\n    + \"drizzly November in my soul; whenever I find myself involuntarily pausing before \"\r\n    + \"coffin warehouses, and bringing up the rear of every funeral I meet; and especially \"\r\n    + \"whenever my hypos get such an upper hand of me, that it requires a strong moral \"\r\n    + \"principle to prevent me from deliberately stepping into the street, and methodically \"\r\n    + \"knocking people's hats off-then, I account it high time to get to sea as soon as I can. \"\r\n    + \"This is my substitute for pistol and ball. With a philosophical flourish Cato throws himself \"\r\n    + \"upon his sword; I quietly take to the ship. There is nothing surprising in this. \"\r\n    + \"If they but knew it, almost all men in their degree, some time or other, cherish \"\r\n    + \"very nearly the same feelings towards the ocean with me. There now is your insular \"\r\n    + \"city of the Manhattoes, belted round by wharves as Indian isles by coral reefs-commerce surrounds \"\r\n    + \"it with her surf. Right and left, the streets take you waterward.\";\r\n\r\nProfile profile = service.getProfile(text);\r\nSystem.out.println(profile);\r\n```\r\n**Node:** Don't forget to update the `text` variable! Also, if you experience\r\nauthentication errors, remember that the Personality Insights service is not\r\na free service.\r\n\r\n### Question and Answer\r\nAsk a healthcare-related question of the\r\n[Question and Answer][question_and_answer] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.question_and_answer.v1.QuestionAndAnswer;\r\nimport com.ibm.watson.developer_cloud.question_and_answer.v1.model.Pipeline;\r\nimport com.ibm.watson.developer_cloud.question_and_answer.v1.model.QuestionAndAnswerDataset;\r\n\r\n\r\nQuestionAndAnswer service = new QuestionAndAnswer();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nservice.setDataset(QuestionAndAnswerDataset.HEALTHCARE);\r\nList<Pipeline> pipelines = service.ask(\"What is HIV?\");\r\nSystem.out.println(pipelines);\r\n```\r\n\r\n### Relationship Extraction\r\nAnalyze an English news article and get the relationships between sentence\r\ncomponents (nouns, verbs, subjects, objects, etc.) by using the\r\n[Relationship Extraction][relationship_extraction] service.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.relationship_extraction.v1.RelationshipExtraction;\r\nimport com.ibm.watson.developer_cloud.relationship_extraction.v1.model.RelationshipExtractionDataset;\r\n\r\nRelationshipExtraction service = new RelationshipExtraction();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nservice.setDataset(RelationshipExtractionDataset.ENGLISH_NEWS);\r\nString response = service.extract(\"IBM Watson Developer Cloud\");\r\nSystem.out.println(response);\r\n```\r\n\r\n### Speech to Text\r\nUse the [Speech to Text][speech_to_text] service to recognize the text from a\r\n.wav file.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.speech_to_text.v1.SpeechToText;\r\nimport com.ibm.watson.developer_cloud.speech_to_text.v1.model.SpeechResults;\r\nimport java.io.File;\r\n\r\nSpeechToText service = new SpeechToText();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nFile audio = new File(\"sample1.wav\");\r\n\r\nSpeechResults transcript = service.recognize(audio, \"audio/l16; rate=44100\");\r\nSystem.out.println(transcript);\r\n```\r\n\r\n#### WebSocket support\r\n\r\nSpeech to Text supports WebSocket so you can use a websocket client like the one in: http://java-websocket.org/\r\nThe websocket url is: `wss://stream.watsonplatform.net/speech-to-text-beta/api/v1/recognize`\r\n\r\n### Text to Speech\r\nUse the [Text to Speech][text_to_speech] service to get the available voices to synthesize.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.text_to_speech.v1.TextToSpeech;\r\nimport com.ibm.watson.developer_cloud.text_to_speech.v1.model.VoiceSet;\r\n\r\nTextToSpeech service = new TextToSpeech();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nVoiceSet voices = service.getVoices();\r\nSystem.out.println(voices);\r\n```\r\n\r\n### Tradeoff Analytics\r\nUse the [Tradeoff Analytics][tradeoff_analytics] service to find the best\r\nphone that minimizes price and weight and maximizes screen size.\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.tradeoff_analytics.v1.TradeoffAnalytics;\r\nimport com.ibm.watson.developer_cloud.tradeoff_analytics.v1.model.Dilemma;\r\nimport com.ibm.watson.developer_cloud.tradeoff_analytics.v1.model.Problem;\r\n\r\nTradeoffAnalytics service = new TradeoffAnalytics();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nProblem problem = new Problem(\"phone\");\r\n\r\n// Define the objectives\r\nList<Column> columns = new ArrayList<Column>();\r\nproblem.setColumns(columns);\r\ncolumns.add(new Column(\"price\", \"Price\", \"NUMERIC\", true, \"MIN\"));\r\ncolumns.add(new Column(\"ram\", \"Ram\", \"NUMERIC\", false, \"MAX\"));\r\ncolumns.add(new Column(\"screen\", \"Screen\", \"NUMERIC\", true, \"MAX\"));\r\n\r\n// Define the options to choose\r\nList<Option> options = new ArrayList<Option>();\r\nproblem.setOptions(options);\r\n\r\nHashMap<String, String> galaxySpecs = new HashMap<String, String>();\r\ngalaxySpecs.put(\"price\", \"300\");\r\ngalaxySpecs.put(\"ram\", \"45\");\r\ngalaxySpecs.put(\"screen\", \"5\");\r\noptions.add(new Option(\"1\", \"Galaxy S4\", galaxySpecs, \"\"));\r\n\r\nHashMap<String, String> iphoneSpecs = new HashMap<String, String>();\r\niphoneSpecs.put(\"price\", \"400\");\r\niphoneSpecs.put(\"ram\", \"40\");\r\niphoneSpecs.put(\"screen\", \"4\");\r\noptions.add(new Option(\"2\", \"iPhone 5\", iphoneSpecs, \"\"));\r\n\r\nHashMap<String, String> optimusSpecs = new HashMap<String, String>();\r\noptimusSpecs.put(\"price\", \"300\");\r\noptimusSpecs.put(\"ram\", \"300\");\r\noptimusSpecs.put(\"screen\", \"5\");\r\noptions.add(new Option(\"3\", \"LG Optimus G\", optimusSpecs, \"\"));\r\n\r\n// Call the service and get the resolution\r\nDilemma dilemma = service.dilemmas(problem);\r\nSystem.out.println(dilemma);\r\n```\r\n\r\n### Visual Recognition\r\nUse the [Visual Recognition][visual_recognition] service to recognize the\r\nfollowing picture.\r\n\r\n![Car](http://visual-recognition-demo.mybluemix.net/images/73388.jpg)\r\n\r\n```java\r\nimport com.ibm.watson.developer_cloud.visual_recognition.v1.VisualRecognition;\r\nimport com.ibm.watson.developer_cloud.visual_recognition.v1.model.RecognizedImage;\r\nimport com.ibm.watson.developer_cloud.visual_recognition.v1.model.LabelSet;\r\nimport java.io.File;\r\n\r\nVisualRecognition service = new VisualRecognition();\r\nservice.setUsernameAndPassword(\"<username>\", \"<password>\");\r\n\r\nFile image = new File(\"car.png\");\r\n\r\nLabelSet labelSet = new LabelSet();\r\nlabelSet.withLabelGroup(\"Animal\").withLabelGroup(\"Food\");\r\n\r\nRecognizedImage recognizedImage = service.recognize(image, labelSet);\r\nSystem.out.println(recognizedImage);\r\n```\r\n\r\n## Android\r\n\r\nThe wrapper works well on Android. It depends on\r\n[Apache HttpClient][] (including the [HttpMime][] module) and [json-java][].\r\nAndroid SDK already comes with these two libraries so you don't need to include\r\nthem when using the wrapper there.\r\n\r\n\r\n## Build + Test\r\n\r\nTo build and test the project you can use [Gradle][] (version 1.x): or [Apache Maven][apache_maven].\r\n\r\nGradle:\r\n\r\n  ```sh\r\n  $ cd java-wrapper\r\n  $ gradle jar  # build jar file (build/libs/watson-developer-cloud-alpha-0.0.9.jar)\r\n  $ gradle test # run tests\r\n  ```\r\n\r\nor Maven:\r\n\r\n  ```sh\r\n  $ cd java-wrapper\r\n  $ mvn install\r\n  ```\r\n\r\n## Working with Eclipse and Intellij IDEA\r\n\r\nIf you want to work on the code in an IDE instead of a text editor you can\r\neasily create project files with gradle:\r\n\r\n  ```sh\r\n  $ gradle idea     # Intellij IDEA\r\n  $ gradle eclipse  # Eclipse\r\n  ```\r\n\r\nor maven:\r\n\r\n  ```sh\r\n  $ mvn idea:idea # Intellij IDEA\r\n  $ mvn eclipse:eclipse # Eclipse\r\n  ```\r\n\r\n\r\n## Open Source @ IBM\r\nFind more open source projects on the [IBM Github Page](http://ibm.github.io/)\r\n\r\n## License\r\n\r\nThis library is licensed under Apache 2.0. Full license text is\r\navailable in [LICENSE](LICENSE).\r\n\r\n## Contributing\r\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\r\n\r\n\r\n[question_and_answer]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/qaapi/\r\n[message_resonance]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mrapi/\r\n[personality_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/personality-insights/\r\n[language_identification]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/lidapi/\r\n[machine_translation]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mtapi/\r\n[concept_expansion]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/glimpseapi/\r\n[relationship_extraction]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/sireapi/\r\n\r\n[visual_recognition]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-recognition/\r\n[tradeoff_analytics]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/tradeoff-analytics/\r\n[text_to_speech]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/text-to-speech/\r\n[speech_to_text]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/speech-to-text/\r\n\r\n[getting_started]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/getstarted.html\r\n[wdc]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\r\n[vcap_environment]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/getting_started/index.html#EnvVars\r\n[bluemix]: https://console.ng.bluemix.net\r\n[Gradle]: http://www.gradle.org/\r\n[Apache HttpClient]: http://hc.apache.org/httpcomponents-client-ga/\r\n[HttpMime]: http://hc.apache.org/httpcomponents-client-ga/httpmime\r\n[json-java]: http://json.org/java/\r\n[apache_maven]: http://maven.apache.org/\r\n[downloads]: https://github.com/watson-developer-cloud/java-wrapper/downloads\r\n","google":"UA-59827755-4","note":"Don't delete this file! It's used internally to help with page regeneration."}